name: Deploy GKE Microsvc

on:
  #push:
    #branches: [ "main" ]
  #pull_request:
    #branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      
      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          install_components: 'gke-gcloud-auth-plugin'
          
      - name: Install kubectl
        uses: azure/setup-kubectl@v3

      - name: Install helm
        uses: azure/setup-helm@v4.2.0
          
      - name: Setup terraform
        uses: hashicorp/setup-terraform@v3

      - name: Deploy Terraform infrastructure
        run: |
          terraform init
          terraform plan
          terraform apply -auto-approve
        working-directory: terraform_code
        env:
          TF_VAR_project_id: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_name: ${{ secrets.GKE_NAME }}
          TF_VAR_zone: ${{ secrets.GKE_ZONE }}
          TF_VAR_region: ${{ secrets.GKE_REGION }}
          TF_VAR_account_id: ${{ secrets.GKE_ACCOUNT_ID }}
          TF_VAR_config_path: ${{ secrets.GKE_CONFIG_PATH }}   
     
      - name: Get GKE Credentials
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_NAME }} \
          --zone ${{ secrets.GKE_ZONE }} \
          --project ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Install External Secrets Operator
        run: |
          helm repo add external-secrets https://charts.external-secrets.io
          helm repo update external-secrets
          helm upgrade --install external-secrets external-secrets/external-secrets --namespace external-secrets --create-namespace
      
      - name: Wait for External Secrets Operator
        run: |
          kubectl wait --for=condition=available deployment -l app.kubernetes.io/name=external-secrets-webhook -n external-secrets --timeout=300s

      - name: Install envsubst
        run: sudo apt-get update && sudo apt-get install -y gettext-base

      - name: Create GCP Service Account Key and Secret
        run: |
          gcloud iam service-accounts keys create key.json \
            --iam-account=gke-secret-access@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com \
            --project=${{ secrets.GCP_PROJECT_ID }}
          kubectl create secret generic gcp-secret-manager \
            --from-file=key.json=key.json \
            -n external-secrets \
            --dry-run=client -o yaml | kubectl apply -f -
          rm -f key.json

      - name: Apply ClusterSecretStore
        run: |
          export GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          envsubst < gcp-cluster-secret-store.yml | kubectl apply -f -
        
      - name: Apply Additional Configs
        run: |
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -f alertmanager-external-secret.yml
        
      - name: Install ArgoCD
        run: |
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
          kubectl wait --for=condition=available deployment -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s
          sleep 10

      - name: Create ArgoCD Project
        run: |
          kubectl apply -f argocd-manifest/gcp-microsvc-project.yml

      - name: Apply Argo applications
        run: |
           kubectl apply -f argocd-manifest/microsvc.yml
           kubectl apply -f argocd-manifest/cert-manager.yml
           kubectl apply -f argocd-manifest/encrypt.yml
           kubectl apply -f argocd-manifest/prometheus-app.yml
           kubectl apply -f argocd-manifest/grafana.yml
           kubectl apply -f argocd-manifest/nginx-ingress.yml
           kubectl apply -f argocd-manifest/ingress.yml





